# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MDPEnvData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MDPEnvData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMDPEnvData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MDPEnvData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MDPEnvData
    def States(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MDPEnvData
    def StatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # MDPEnvData
    def StatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MDPEnvData
    def StatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # MDPEnvData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MDPEnvData
    def ActionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # MDPEnvData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MDPEnvData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MDPEnvData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MDPEnvData
    def RewardsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # MDPEnvData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MDPEnvData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def MDPEnvDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddStates(builder, states): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(states), 0)
def MDPEnvDataAddStates(builder, states):
    """This method is deprecated. Please switch to AddStates."""
    return AddStates(builder, states)
def StartStatesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MDPEnvDataStartStatesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatesVector(builder, numElems)
def AddActions(builder, actions): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)
def MDPEnvDataAddActions(builder, actions):
    """This method is deprecated. Please switch to AddActions."""
    return AddActions(builder, actions)
def StartActionsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MDPEnvDataStartActionsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartActionsVector(builder, numElems)
def AddRewards(builder, rewards): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)
def MDPEnvDataAddRewards(builder, rewards):
    """This method is deprecated. Please switch to AddRewards."""
    return AddRewards(builder, rewards)
def StartRewardsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MDPEnvDataStartRewardsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardsVector(builder, numElems)
def End(builder): return builder.EndObject()
def MDPEnvDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)