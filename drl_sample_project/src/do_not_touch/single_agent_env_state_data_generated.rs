// automatically generated by the FlatBuffers compiler, do not modify



extern crate flatbuffers;

use std::cmp::Ordering;
use std::mem;

use self::flatbuffers::{EndianScalar, Follow};


pub enum SingleAgentEnvStateDataOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct SingleAgentEnvStateData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SingleAgentEnvStateData<'a> {
    type Inner = SingleAgentEnvStateData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> SingleAgentEnvStateData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SingleAgentEnvStateData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SingleAgentEnvStateDataArgs<'args>) -> flatbuffers::WIPOffset<SingleAgentEnvStateData<'bldr>> {
        let mut builder = SingleAgentEnvStateDataBuilder::new(_fbb);
        builder.add_state_id(args.state_id);
        if let Some(x) = args.available_actions_ids { builder.add_available_actions_ids(x); }
        builder.add_score(args.score);
        builder.add_is_game_over(args.is_game_over);
        builder.finish()
    }

    pub const VT_STATE_ID: flatbuffers::VOffsetT = 4;
    pub const VT_IS_GAME_OVER: flatbuffers::VOffsetT = 6;
    pub const VT_SCORE: flatbuffers::VOffsetT = 8;
    pub const VT_AVAILABLE_ACTIONS_IDS: flatbuffers::VOffsetT = 10;

    #[inline]
    pub fn state_id(&self) -> u64 {
        self._tab.get::<u64>(SingleAgentEnvStateData::VT_STATE_ID, Some(0)).unwrap()
    }
    #[inline]
    pub fn is_game_over(&self) -> bool {
        self._tab.get::<bool>(SingleAgentEnvStateData::VT_IS_GAME_OVER, Some(false)).unwrap()
    }
    #[inline]
    pub fn score(&self) -> f32 {
        self._tab.get::<f32>(SingleAgentEnvStateData::VT_SCORE, Some(0.0)).unwrap()
    }
    #[inline]
    pub fn available_actions_ids(&self) -> Option<flatbuffers::Vector<'a, u64>> {
        self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(SingleAgentEnvStateData::VT_AVAILABLE_ACTIONS_IDS, None)
    }
}

impl flatbuffers::Verifiable for SingleAgentEnvStateData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier, pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>(&"state_id", Self::VT_STATE_ID, false)?
            .visit_field::<bool>(&"is_game_over", Self::VT_IS_GAME_OVER, false)?
            .visit_field::<f32>(&"score", Self::VT_SCORE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"available_actions_ids", Self::VT_AVAILABLE_ACTIONS_IDS, false)?
            .finish();
        Ok(())
    }
}

pub struct SingleAgentEnvStateDataArgs<'a> {
    pub state_id: u64,
    pub is_game_over: bool,
    pub score: f32,
    pub available_actions_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}

impl<'a> Default for SingleAgentEnvStateDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        SingleAgentEnvStateDataArgs {
            state_id: 0,
            is_game_over: false,
            score: 0.0,
            available_actions_ids: None,
        }
    }
}

pub struct SingleAgentEnvStateDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> SingleAgentEnvStateDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_state_id(&mut self, state_id: u64) {
        self.fbb_.push_slot::<u64>(SingleAgentEnvStateData::VT_STATE_ID, state_id, 0);
    }
    #[inline]
    pub fn add_is_game_over(&mut self, is_game_over: bool) {
        self.fbb_.push_slot::<bool>(SingleAgentEnvStateData::VT_IS_GAME_OVER, is_game_over, false);
    }
    #[inline]
    pub fn add_score(&mut self, score: f32) {
        self.fbb_.push_slot::<f32>(SingleAgentEnvStateData::VT_SCORE, score, 0.0);
    }
    #[inline]
    pub fn add_available_actions_ids(&mut self, available_actions_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u64>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SingleAgentEnvStateData::VT_AVAILABLE_ACTIONS_IDS, available_actions_ids);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SingleAgentEnvStateDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        SingleAgentEnvStateDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<SingleAgentEnvStateData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for SingleAgentEnvStateData<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("SingleAgentEnvStateData");
        ds.field("state_id", &self.state_id());
        ds.field("is_game_over", &self.is_game_over());
        ds.field("score", &self.score());
        ds.field("available_actions_ids", &self.available_actions_ids());
        ds.finish()
    }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_single_agent_env_state_data<'a>(buf: &'a [u8]) -> SingleAgentEnvStateData<'a> {
    unsafe { flatbuffers::root_unchecked::<SingleAgentEnvStateData<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_single_agent_env_state_data<'a>(buf: &'a [u8]) -> SingleAgentEnvStateData<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<SingleAgentEnvStateData<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `SingleAgentEnvStateData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_single_agent_env_state_data_unchecked`.
pub fn root_as_single_agent_env_state_data(buf: &[u8]) -> Result<SingleAgentEnvStateData, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<SingleAgentEnvStateData>(buf)
}

#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SingleAgentEnvStateData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_single_agent_env_state_data_unchecked`.
pub fn size_prefixed_root_as_single_agent_env_state_data(buf: &[u8]) -> Result<SingleAgentEnvStateData, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<SingleAgentEnvStateData>(buf)
}

#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SingleAgentEnvStateData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_single_agent_env_state_data_unchecked`.
pub fn root_as_single_agent_env_state_data_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<SingleAgentEnvStateData<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<SingleAgentEnvStateData<'b>>(opts, buf)
}

#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SingleAgentEnvStateData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_single_agent_env_state_data_unchecked`.
pub fn size_prefixed_root_as_single_agent_env_state_data_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<SingleAgentEnvStateData<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<SingleAgentEnvStateData<'b>>(opts, buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SingleAgentEnvStateData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SingleAgentEnvStateData`.
pub unsafe fn root_as_single_agent_env_state_data_unchecked(buf: &[u8]) -> SingleAgentEnvStateData {
    flatbuffers::root_unchecked::<SingleAgentEnvStateData>(buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SingleAgentEnvStateData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SingleAgentEnvStateData`.
pub unsafe fn size_prefixed_root_as_single_agent_env_state_data_unchecked(buf: &[u8]) -> SingleAgentEnvStateData {
    flatbuffers::size_prefixed_root_unchecked::<SingleAgentEnvStateData>(buf)
}

#[inline]
pub fn finish_single_agent_env_state_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SingleAgentEnvStateData<'a>>) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_single_agent_env_state_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<SingleAgentEnvStateData<'a>>) {
    fbb.finish_size_prefixed(root, None);
}
