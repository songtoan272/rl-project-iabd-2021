// automatically generated by the FlatBuffers compiler, do not modify



extern crate flatbuffers;

use std::cmp::Ordering;
use std::mem;

use self::flatbuffers::{EndianScalar, Follow};


pub enum MDPEnvDataOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MDPEnvData<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MDPEnvData<'a> {
    type Inner = MDPEnvData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> MDPEnvData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MDPEnvData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MDPEnvDataArgs<'args>) -> flatbuffers::WIPOffset<MDPEnvData<'bldr>> {
        let mut builder = MDPEnvDataBuilder::new(_fbb);
        if let Some(x) = args.rewards { builder.add_rewards(x); }
        if let Some(x) = args.actions { builder.add_actions(x); }
        if let Some(x) = args.states { builder.add_states(x); }
        builder.finish()
    }

    pub const VT_STATES: flatbuffers::VOffsetT = 4;
    pub const VT_ACTIONS: flatbuffers::VOffsetT = 6;
    pub const VT_REWARDS: flatbuffers::VOffsetT = 8;

    #[inline]
    pub fn states(&self) -> Option<flatbuffers::Vector<'a, u64>> {
        self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(MDPEnvData::VT_STATES, None)
    }
    #[inline]
    pub fn actions(&self) -> Option<flatbuffers::Vector<'a, u64>> {
        self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(MDPEnvData::VT_ACTIONS, None)
    }
    #[inline]
    pub fn rewards(&self) -> Option<flatbuffers::Vector<'a, f32>> {
        self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(MDPEnvData::VT_REWARDS, None)
    }
}

impl flatbuffers::Verifiable for MDPEnvData<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier, pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"states", Self::VT_STATES, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"actions", Self::VT_ACTIONS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>(&"rewards", Self::VT_REWARDS, false)?
            .finish();
        Ok(())
    }
}

pub struct MDPEnvDataArgs<'a> {
    pub states: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub actions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub rewards: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}

impl<'a> Default for MDPEnvDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        MDPEnvDataArgs {
            states: None,
            actions: None,
            rewards: None,
        }
    }
}

pub struct MDPEnvDataBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MDPEnvDataBuilder<'a, 'b> {
    #[inline]
    pub fn add_states(&mut self, states: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u64>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MDPEnvData::VT_STATES, states);
    }
    #[inline]
    pub fn add_actions(&mut self, actions: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u64>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MDPEnvData::VT_ACTIONS, actions);
    }
    #[inline]
    pub fn add_rewards(&mut self, rewards: flatbuffers::WIPOffset<flatbuffers::Vector<'b, f32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MDPEnvData::VT_REWARDS, rewards);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MDPEnvDataBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MDPEnvDataBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MDPEnvData<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for MDPEnvData<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("MDPEnvData");
        ds.field("states", &self.states());
        ds.field("actions", &self.actions());
        ds.field("rewards", &self.rewards());
        ds.finish()
    }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_mdpenv_data<'a>(buf: &'a [u8]) -> MDPEnvData<'a> {
    unsafe { flatbuffers::root_unchecked::<MDPEnvData<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_mdpenv_data<'a>(buf: &'a [u8]) -> MDPEnvData<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<MDPEnvData<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `MDPEnvData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mdpenv_data_unchecked`.
pub fn root_as_mdpenv_data(buf: &[u8]) -> Result<MDPEnvData, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<MDPEnvData>(buf)
}

#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MDPEnvData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mdpenv_data_unchecked`.
pub fn size_prefixed_root_as_mdpenv_data(buf: &[u8]) -> Result<MDPEnvData, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<MDPEnvData>(buf)
}

#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MDPEnvData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mdpenv_data_unchecked`.
pub fn root_as_mdpenv_data_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<MDPEnvData<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<MDPEnvData<'b>>(opts, buf)
}

#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MDPEnvData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mdpenv_data_unchecked`.
pub fn size_prefixed_root_as_mdpenv_data_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<MDPEnvData<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<MDPEnvData<'b>>(opts, buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MDPEnvData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MDPEnvData`.
pub unsafe fn root_as_mdpenv_data_unchecked(buf: &[u8]) -> MDPEnvData {
    flatbuffers::root_unchecked::<MDPEnvData>(buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MDPEnvData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MDPEnvData`.
pub unsafe fn size_prefixed_root_as_mdpenv_data_unchecked(buf: &[u8]) -> MDPEnvData {
    flatbuffers::size_prefixed_root_unchecked::<MDPEnvData>(buf)
}

#[inline]
pub fn finish_mdpenv_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MDPEnvData<'a>>) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_mdpenv_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<MDPEnvData<'a>>) {
    fbb.finish_size_prefixed(root, None);
}
